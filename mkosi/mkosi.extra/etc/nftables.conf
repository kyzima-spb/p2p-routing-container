#!/usr/sbin/nft -f

flush ruleset

table inet filter {
    set azvpnwhitelist {
        type ipv4_addr
        flags interval
    }

    chain forward {
        type filter hook forward priority filter;

        # Запрещаем все битые пакеты
        ct state invalid counter drop
        # Разрешаем пакеты уже существующих соединений
        # и новые соединения, связанные с существующими
        ct state established,related counter accept
        # Разрешить весь DNAT-трафик автоматически
        ct status dnat counter accept

        # Разрешить пакеты с интерфейсов, имя которых начинается на vpn, помеченные маркером 1
        # и адрес назначения пакета есть в множестве IP azvpnwhitelist
        iifname "vpn*" ct mark 1 ip daddr @azvpnwhitelist counter accept

        # Отклонить пакеты с интерфейсов, имя которых начинается на vpn, помеченные маркером 1,
        # в ответ ядро отправляет ICMP-сообщение "порт недоступен"
        iifname "vpn*" ct mark 1 counter reject with icmp port-unreachable

        # Разрешить все пакеты от VPN наружу
        iifname "vpn*" oifname { "host0", "eth0" } counter accept

        # Отклоняем все остальные пакеты с ICMP-сообщением "порт недоступен"
        counter reject with icmp port-unreachable
    }
}

table inet nat {
    set vpn_subnets {
        type ipv4_addr
        flags interval
        elements = { 192.168.100.0/22, 192.168.104.0/22 }
    }
    set vpn_gateway {
        type ipv4_addr
        flags interval
        elements = { 192.168.100.1/32, 192.168.104.1/32 }
    }
    map dns_map {
        type ipv4_addr : ipv4_addr
    }

    chain prerouting {
        type nat hook prerouting priority dstnat;

        # DNS redirection
        # Перенаправляем DNS-запрос из VPN-подсетей на DNS хоста,
        # кроме запросов к локальным VPN-DNS серверам
        ip saddr @vpn_subnets ip daddr != @vpn_gateway udp dport 53 counter redirect to :53
            #udp[10:2] & 0xFFCF == 0x0100 \
            #udp[12:2] == 1 \
            #counter redirect to :53

        # dnsmap
        # Разрешает запросы из VPN-подсетей к локальному VPN-серверу
        ip saddr @vpn_subnets ip daddr @vpn_gateway counter accept

        # Маркируем трафик из VPN сети исключая внутреннюю подсеть
        ip saddr @vpn_subnets ip daddr != 10.224.0.0/15 ct mark set 1 counter

        # Для всех пакетов из VPN-подсети подменяем фейковый IP на реальный из dns_map
        ip saddr @vpn_subnets ip daddr 10.224.0.0/15 dnat to ip daddr map @dns_map
    }

    chain postrouting {
        type nat hook postrouting priority srcnat;

        # Маскарадинг трафика VPN через внешний интерфейс
        ip saddr @vpn_subnets counter masquerade
    }
}
