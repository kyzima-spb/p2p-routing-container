#!/usr/bin/env bash
set -e


die() {
  echo >&2 "$1"
  exit 1
}


get_file_sha() {
  local token="$1"
  local lookup="$2"
  local path="$3"
  local branch="$4"
  curl -Ls \
       -H "Accept: application/vnd.github+json" \
       -H "Authorization: Bearer $token" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       "https://api.github.com/repos/${lookup}/contents/${path}?ref=$branch" | jq -r '.sha // ""'
}


delete_remote_file() {
  local token="$1"
  local lookup="$2"
  local path="$3"
  local message="${4:-File $path removed}"
  local branch="$5"
  curl -LsSf --fail-early \
       -X DELETE \
       -H "Accept: application/vnd.github+json" \
       -H "Authorization: Bearer $token" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       -d "{\"message\":\"$message\",\"sha\":\"$(get_file_sha "$token" "$lookup" "$path" "$branch")\",\"branch\":\"$branch\"}" \
       "https://api.github.com/repos/${lookup}/contents/${path}" >/dev/null
  echo 'OK'
}


read_remote_file() {
  local token="$1"
  local lookup="$2"
  local path="$3"
  local branch="$4"
  curl -LsSf --fail-early \
       -H "Accept: application/vnd.github.v3.raw" \
       -H "Authorization: Bearer $token" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       "https://api.github.com/repos/${lookup}/contents/${path}?ref=$branch"
}


write_remote_file() {
  local token="$1"
  local lookup="$2"
  local path="$3"
  local message="${4:-Create file $path}"
  local branch="$5"
  local content
  local sha

  content="$(base64 -w 0)"
  sha=$(get_file_sha "$token" "$lookup" "$path" "$branch")

  [[ -z "$sha" ]] || message="${4:-Changed file $path}"

  curl -LsSf --fail-early \
       -X PUT \
       -H "Accept: application/vnd.github+json" \
       -H "Authorization: Bearer $token" \
       -H "X-GitHub-Api-Version: 2022-11-28" \
       -d "{\"message\":\"$message\",\"sha\":\"$sha\",\"content\":\"$content\",\"branch\":\"$branch\"}" \
       "https://api.github.com/repos/${lookup}/contents/${path}" >/dev/null

  echo 'OK'
}


usage() {
	case "$1" in
		deletefile)
			cat 1>&2 <<-ENDOFUSAGE

			Deletes a file in a repository

			Usage: $(basename "$0") $1 [OPTIONS]

			Options:
			  -m --message STRING   The commit message

			ENDOFUSAGE
			;;
		readfile)
			cat 1>&2 <<-ENDOFUSAGE

			Gets the contents of a file or directory in a repository

			Usage: $(basename "$0") $1 [OPTIONS]

			ENDOFUSAGE
			;;
		writefile)
			cat 1>&2 <<-ENDOFUSAGE

			Creates a new file or replaces an existing file in a repository

			Usage: $(basename "$0") $1 [OPTIONS]" < INPUT_FILE

			Options:
			  -m --message STRING   The commit message

			ENDOFUSAGE
			;;
		*)
			cat 1>&2 <<-ENDOFUSAGE

			Utility to create, modify, and delete Base64 encoded content in a GitHub repository.

			Usage: $(basename "$0") COMMAND user/repo/path [OPTIONS]

			Commands:
			  deletefile    Deletes a file in a repository
			  readfile      Gets the contents of a file or directory in a repository
			  writefile     Creates a new file or replaces an existing file in a repository

			Positional:
			  user          The account owner of the repository. The name is not case sensitive
			  repo          The name of the repository without the .git extension. The name is not case sensitive
			  path          The file name in the repository

			Options:
			  -b --branch   The name of the commit/branch/tag, default - the repositoryâ€™s default branch
			  -h --help     Show general help
			  --token       Path to file with the GitHub access token
			                Default $HOME/.github_token or /root/.github_token

			ENDOFUSAGE
			;;
	esac
}


main() {
  local name value show_help=false

  declare cli_positional=()
  declare -A cli_options=(
    [token]="${HOME:-/root}/.github_token"
  )
  declare -A options_map=(
    [-b]="branch"
    [--branch]="branch"
    [-m]="message"
    [--message]="message"
    [--token]="token"
  )

  while [[ "$#" -gt 0 ]]
  do
    case "$1" in
      -h|--help)
        show_help=true
        ;;
      -*)
        IFS='=' read -r name value <<< "$1"
        [[ -v "options_map[$name]" ]] || die "Error: Unknown option $1"
        [[ "$1" == *"="* ]] && cli_options["${options_map[$name]}"]=$value || cli_options["${options_map[$name]}"]=true
        ;;
      *)
        cli_positional+=("$1")
        ;;
    esac
    shift
  done

  local cmd="${cli_positional[0]}"

  if $show_help
  then
      usage "$cmd"
      exit 0
  fi

  if [[ "${#cli_positional[*]}" -lt 2 ]]
  then
      usage "$cmd"
      exit 1
  fi

  local user repo path
  IFS='/' read -r user repo path <<< "${cli_positional[1]}"

  [[ -n "$user" && -n "$repo" ]] || die 'Required positional argument: user/repo/path'
  [[ -n "$path" ]] || die 'Required positional argument: user/repo/path'
  [[ -f "${cli_options[token]}" ]] || die 'Required argument: --token'

  local -r token="$(<"${cli_options[token]}")"

  case "$cmd" in
    deletefile) delete_remote_file "$token" "${user}/${repo}" "$path" "${cli_options[message]}" "${cli_options[branch]}" ;;
    readfile) read_remote_file "$token" "${user}/${repo}" "$path" "${cli_options[branch]}" ;;
    writefile) write_remote_file "$token" "${user}/${repo}" "$path" "${cli_options[message]}" "${cli_options[branch]}" ;;
  esac
}

main "$@"
